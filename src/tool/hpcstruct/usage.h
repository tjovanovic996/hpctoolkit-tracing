"Given an application binary, a shared library, or an hpctoolkit\n"
"measurement directory collected for a GPU-accelerated program that run\n"
"on NVIDIA GPUs, hpcstruct recovers the program structure of its object\n"
"code.  Program structure is a mapping of a program's static source-level\n"
"structure to its object code.  By default, hpcstruct writes its results\n"
"to the file 'basename(<binary>).hpcstruct'.  This file is typically\n"
"passed to HPCToolkit's correlation tool hpcprof.\n"
"\n"
"hpcstruct is designed for highly optimized binaries created from\n"
"compiled languages such as C, C++, Fortran, and CUDA source code. Because\n"
"hpcstruct's algorithms exploit a binary's debugging information, for best\n"
"results, binary should be compiled with standard debugging information.\n"
"See the documentation for more information.\n"
"\n"
"Options: General\n"
"  -v [<n>], --verbose [<n>]\n"
"                       Verbose: generate progress messages to stderr at\n"
"                       verbosity level <n>. {1}\n"
"  -V, --version        Print version information.\n"
"  -h, --help           Print this help.\n"
"  --debug=[<n>]        Debug: use debug level <n>. {1}\n"
"  --debug-proc <glob>  Debug structure recovery for procedures matching\n"
"                       the procedure glob <glob>\n"
"  -j <num>, --jobs <num>  Use <num> openmp threads (jobs), default 1.\n"
"  --jobs-parse <num>   Use <num> openmp threads for ParseAPI::parse(),\n"
"                       default is same value for --jobs.\n"
"  --jobs-symtab <num>  Use <num> openmp threads for Symtab methods.\n"
"  --time               Display stats on time and space usage.\n"
"\n"
"Options: Structure recovery\n"
"  -I <path>, --include <path>\n"
"                       Use <path> when resolving source file names. For a\n"
"                       recursive search, append a '*' after the last slash,\n"
"                       e.g., '/mypath/*' (quote or escape to protect from\n"
"                       the shell.) May pass multiple times.\n"
"\n"
"  -R '<old-path>=<new-path>', --replace-path '<old-path>=<new-path>'\n"
"                       Substitute instances of <old-path> with <new-path>;\n"
"                       apply to all paths (profile's load map, source code)\n"
"                       for which <old-path> is a prefix.  Use '\\' to escape\n"
"                       instances of '=' within a path. May pass multiple\n"
"                       times.\n"
"  --use-binutils       Use binutils as the default binary instruction decoder\n"
"                       On x86 default is Intel XED library.\n"
"  --show-gaps          Experimental feature to show unclaimed vma ranges (gaps)\n"
"                       in the control-flow graph.\n"
"\n"
"Options: Demangling\n"
"  --demangle-library <path to demangling library>\n"
"                       Specify the pathname for a dynamically-linked\n"
"                       library whose demangler function should \n"
"                       be used for demangling. By default, the demangler used\n"
"                       is __cxa_demangle in the C++ Standard Library linked into\n"
"                       hpcstruct.\n"
"\n"
"  --demangle-function <name of the demangler>\n"
"                       By default, the demangler used is __cxa_demangle, a function\n"
"                       provided by the C++ Standard Library. This option enables\n"
"                       one to specify an alternate demangler, e.g., cplus_demangle\n"
"                       provided by the BFD library.\n"
"\n"
"Options: Output:\n"
"  -o <file>, --output <file>\n"
"                       Write hpcstruct file to <file>.\n"
"                       Use '--output=-' to write output to stdout.\n"
"  --compact            Generate compact output, eliminating extra white space\n"
